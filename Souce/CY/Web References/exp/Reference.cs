//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace CY.exp {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExpressSoap", Namespace="express")]
    public partial class Express : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private SecurityHeader securityHeaderValueField;
        
        private System.Threading.SendOrPostCallback InsertExpressOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExpressOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertExp_RecOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkExp_NoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExp_RecOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExpressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExpress1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLiRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFenHuoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelExpressOperationCompleted;
        
        private System.Threading.SendOrPostCallback upfilebyteOperationCompleted;
        
        private System.Threading.SendOrPostCallback downfilebyteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExpressRecOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback delBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoxInOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GexExpBoxOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Express() {
            this.Url = global::CY.Properties.Settings.Default.CY_exp_Express;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public SecurityHeader SecurityHeaderValue {
            get {
                return this.securityHeaderValueField;
            }
            set {
                this.securityHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertExpressCompletedEventHandler InsertExpressCompleted;
        
        /// <remarks/>
        public event ShCompletedEventHandler ShCompleted;
        
        /// <remarks/>
        public event UpdateExpressCompletedEventHandler UpdateExpressCompleted;
        
        /// <remarks/>
        public event InsertExp_RecCompletedEventHandler InsertExp_RecCompleted;
        
        /// <remarks/>
        public event ChkExp_NoCompletedEventHandler ChkExp_NoCompleted;
        
        /// <remarks/>
        public event UpdateExp_RecCompletedEventHandler UpdateExp_RecCompleted;
        
        /// <remarks/>
        public event GetExpressCompletedEventHandler GetExpressCompleted;
        
        /// <remarks/>
        public event GetExpress1CompletedEventHandler GetExpress1Completed;
        
        /// <remarks/>
        public event GetLiRunCompletedEventHandler GetLiRunCompleted;
        
        /// <remarks/>
        public event GetFenHuoCompletedEventHandler GetFenHuoCompleted;
        
        /// <remarks/>
        public event DelExpressCompletedEventHandler DelExpressCompleted;
        
        /// <remarks/>
        public event upfilebyteCompletedEventHandler upfilebyteCompleted;
        
        /// <remarks/>
        public event downfilebyteCompletedEventHandler downfilebyteCompleted;
        
        /// <remarks/>
        public event GetExpressRecCompletedEventHandler GetExpressRecCompleted;
        
        /// <remarks/>
        public event GetUnBoxCompletedEventHandler GetUnBoxCompleted;
        
        /// <remarks/>
        public event InsertBoxCompletedEventHandler InsertBoxCompleted;
        
        /// <remarks/>
        public event UpdateBoxCompletedEventHandler UpdateBoxCompleted;
        
        /// <remarks/>
        public event delBoxCompletedEventHandler delBoxCompleted;
        
        /// <remarks/>
        public event BoxInCompletedEventHandler BoxInCompleted;
        
        /// <remarks/>
        public event UnBoxCompletedEventHandler UnBoxCompleted;
        
        /// <remarks/>
        public event GexExpBoxCompletedEventHandler GexExpBoxCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/InsertExpress", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertExpress(
                    string expNo, 
                    string custid, 
                    string sale, 
                    string arrivedate, 
                    string productid, 
                    string weight, 
                    string vol, 
                    string unitprice, 
                    string coin, 
                    string rate, 
                    string totalcoin, 
                    string totalvalue, 
                    string pcs, 
                    string predictdate, 
                    string comidyname, 
                    string desc, 
                    string paymode, 
                    string delivery, 
                    string shipcity, 
                    string fh_user, 
                    string serverid, 
                    string chargetype, 
                    string createuser, 
                    string createdate, 
                    string youhui, 
                    string exp_pre, 
                    string exp_descop, 
                    string density, 
                    string exp_values) {
            object[] results = this.Invoke("InsertExpress", new object[] {
                        expNo,
                        custid,
                        sale,
                        arrivedate,
                        productid,
                        weight,
                        vol,
                        unitprice,
                        coin,
                        rate,
                        totalcoin,
                        totalvalue,
                        pcs,
                        predictdate,
                        comidyname,
                        desc,
                        paymode,
                        delivery,
                        shipcity,
                        fh_user,
                        serverid,
                        chargetype,
                        createuser,
                        createdate,
                        youhui,
                        exp_pre,
                        exp_descop,
                        density,
                        exp_values});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertExpressAsync(
                    string expNo, 
                    string custid, 
                    string sale, 
                    string arrivedate, 
                    string productid, 
                    string weight, 
                    string vol, 
                    string unitprice, 
                    string coin, 
                    string rate, 
                    string totalcoin, 
                    string totalvalue, 
                    string pcs, 
                    string predictdate, 
                    string comidyname, 
                    string desc, 
                    string paymode, 
                    string delivery, 
                    string shipcity, 
                    string fh_user, 
                    string serverid, 
                    string chargetype, 
                    string createuser, 
                    string createdate, 
                    string youhui, 
                    string exp_pre, 
                    string exp_descop, 
                    string density, 
                    string exp_values) {
            this.InsertExpressAsync(expNo, custid, sale, arrivedate, productid, weight, vol, unitprice, coin, rate, totalcoin, totalvalue, pcs, predictdate, comidyname, desc, paymode, delivery, shipcity, fh_user, serverid, chargetype, createuser, createdate, youhui, exp_pre, exp_descop, density, exp_values, null);
        }
        
        /// <remarks/>
        public void InsertExpressAsync(
                    string expNo, 
                    string custid, 
                    string sale, 
                    string arrivedate, 
                    string productid, 
                    string weight, 
                    string vol, 
                    string unitprice, 
                    string coin, 
                    string rate, 
                    string totalcoin, 
                    string totalvalue, 
                    string pcs, 
                    string predictdate, 
                    string comidyname, 
                    string desc, 
                    string paymode, 
                    string delivery, 
                    string shipcity, 
                    string fh_user, 
                    string serverid, 
                    string chargetype, 
                    string createuser, 
                    string createdate, 
                    string youhui, 
                    string exp_pre, 
                    string exp_descop, 
                    string density, 
                    string exp_values, 
                    object userState) {
            if ((this.InsertExpressOperationCompleted == null)) {
                this.InsertExpressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertExpressOperationCompleted);
            }
            this.InvokeAsync("InsertExpress", new object[] {
                        expNo,
                        custid,
                        sale,
                        arrivedate,
                        productid,
                        weight,
                        vol,
                        unitprice,
                        coin,
                        rate,
                        totalcoin,
                        totalvalue,
                        pcs,
                        predictdate,
                        comidyname,
                        desc,
                        paymode,
                        delivery,
                        shipcity,
                        fh_user,
                        serverid,
                        chargetype,
                        createuser,
                        createdate,
                        youhui,
                        exp_pre,
                        exp_descop,
                        density,
                        exp_values}, this.InsertExpressOperationCompleted, userState);
        }
        
        private void OnInsertExpressOperationCompleted(object arg) {
            if ((this.InsertExpressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertExpressCompleted(this, new InsertExpressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/Sh", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Sh(string exp_id, string YN) {
            object[] results = this.Invoke("Sh", new object[] {
                        exp_id,
                        YN});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ShAsync(string exp_id, string YN) {
            this.ShAsync(exp_id, YN, null);
        }
        
        /// <remarks/>
        public void ShAsync(string exp_id, string YN, object userState) {
            if ((this.ShOperationCompleted == null)) {
                this.ShOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShOperationCompleted);
            }
            this.InvokeAsync("Sh", new object[] {
                        exp_id,
                        YN}, this.ShOperationCompleted, userState);
        }
        
        private void OnShOperationCompleted(object arg) {
            if ((this.ShCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShCompleted(this, new ShCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/UpdateExpress", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateExpress(
                    string expId, 
                    string expNo, 
                    string custid, 
                    string sale, 
                    string arrivedate, 
                    string productid, 
                    string weight, 
                    string vol, 
                    string unitprice, 
                    string totalcoin, 
                    string totalvalue, 
                    string pcs, 
                    string comidyname, 
                    string desc, 
                    string paymode, 
                    string delivery, 
                    string shipcity, 
                    string exp_coin, 
                    string exp_rate, 
                    string fh_user, 
                    string serverid, 
                    string chargetype, 
                    string lastuser, 
                    string lastdate, 
                    string closedate, 
                    string youhui, 
                    string serverjine, 
                    string exp_descop, 
                    string density, 
                    string exp_values) {
            object[] results = this.Invoke("UpdateExpress", new object[] {
                        expId,
                        expNo,
                        custid,
                        sale,
                        arrivedate,
                        productid,
                        weight,
                        vol,
                        unitprice,
                        totalcoin,
                        totalvalue,
                        pcs,
                        comidyname,
                        desc,
                        paymode,
                        delivery,
                        shipcity,
                        exp_coin,
                        exp_rate,
                        fh_user,
                        serverid,
                        chargetype,
                        lastuser,
                        lastdate,
                        closedate,
                        youhui,
                        serverjine,
                        exp_descop,
                        density,
                        exp_values});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExpressAsync(
                    string expId, 
                    string expNo, 
                    string custid, 
                    string sale, 
                    string arrivedate, 
                    string productid, 
                    string weight, 
                    string vol, 
                    string unitprice, 
                    string totalcoin, 
                    string totalvalue, 
                    string pcs, 
                    string comidyname, 
                    string desc, 
                    string paymode, 
                    string delivery, 
                    string shipcity, 
                    string exp_coin, 
                    string exp_rate, 
                    string fh_user, 
                    string serverid, 
                    string chargetype, 
                    string lastuser, 
                    string lastdate, 
                    string closedate, 
                    string youhui, 
                    string serverjine, 
                    string exp_descop, 
                    string density, 
                    string exp_values) {
            this.UpdateExpressAsync(expId, expNo, custid, sale, arrivedate, productid, weight, vol, unitprice, totalcoin, totalvalue, pcs, comidyname, desc, paymode, delivery, shipcity, exp_coin, exp_rate, fh_user, serverid, chargetype, lastuser, lastdate, closedate, youhui, serverjine, exp_descop, density, exp_values, null);
        }
        
        /// <remarks/>
        public void UpdateExpressAsync(
                    string expId, 
                    string expNo, 
                    string custid, 
                    string sale, 
                    string arrivedate, 
                    string productid, 
                    string weight, 
                    string vol, 
                    string unitprice, 
                    string totalcoin, 
                    string totalvalue, 
                    string pcs, 
                    string comidyname, 
                    string desc, 
                    string paymode, 
                    string delivery, 
                    string shipcity, 
                    string exp_coin, 
                    string exp_rate, 
                    string fh_user, 
                    string serverid, 
                    string chargetype, 
                    string lastuser, 
                    string lastdate, 
                    string closedate, 
                    string youhui, 
                    string serverjine, 
                    string exp_descop, 
                    string density, 
                    string exp_values, 
                    object userState) {
            if ((this.UpdateExpressOperationCompleted == null)) {
                this.UpdateExpressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExpressOperationCompleted);
            }
            this.InvokeAsync("UpdateExpress", new object[] {
                        expId,
                        expNo,
                        custid,
                        sale,
                        arrivedate,
                        productid,
                        weight,
                        vol,
                        unitprice,
                        totalcoin,
                        totalvalue,
                        pcs,
                        comidyname,
                        desc,
                        paymode,
                        delivery,
                        shipcity,
                        exp_coin,
                        exp_rate,
                        fh_user,
                        serverid,
                        chargetype,
                        lastuser,
                        lastdate,
                        closedate,
                        youhui,
                        serverjine,
                        exp_descop,
                        density,
                        exp_values}, this.UpdateExpressOperationCompleted, userState);
        }
        
        private void OnUpdateExpressOperationCompleted(object arg) {
            if ((this.UpdateExpressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExpressCompleted(this, new UpdateExpressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/InsertExp_Rec", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertExp_Rec(string exp_id, string rec_name, string rec_company, string rec_countryid, string rec_city, string rec_addr1, string rec_addr2, string rec_tel, string rec_postcode, string rec_email, string rec_skype) {
            object[] results = this.Invoke("InsertExp_Rec", new object[] {
                        exp_id,
                        rec_name,
                        rec_company,
                        rec_countryid,
                        rec_city,
                        rec_addr1,
                        rec_addr2,
                        rec_tel,
                        rec_postcode,
                        rec_email,
                        rec_skype});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertExp_RecAsync(string exp_id, string rec_name, string rec_company, string rec_countryid, string rec_city, string rec_addr1, string rec_addr2, string rec_tel, string rec_postcode, string rec_email, string rec_skype) {
            this.InsertExp_RecAsync(exp_id, rec_name, rec_company, rec_countryid, rec_city, rec_addr1, rec_addr2, rec_tel, rec_postcode, rec_email, rec_skype, null);
        }
        
        /// <remarks/>
        public void InsertExp_RecAsync(string exp_id, string rec_name, string rec_company, string rec_countryid, string rec_city, string rec_addr1, string rec_addr2, string rec_tel, string rec_postcode, string rec_email, string rec_skype, object userState) {
            if ((this.InsertExp_RecOperationCompleted == null)) {
                this.InsertExp_RecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertExp_RecOperationCompleted);
            }
            this.InvokeAsync("InsertExp_Rec", new object[] {
                        exp_id,
                        rec_name,
                        rec_company,
                        rec_countryid,
                        rec_city,
                        rec_addr1,
                        rec_addr2,
                        rec_tel,
                        rec_postcode,
                        rec_email,
                        rec_skype}, this.InsertExp_RecOperationCompleted, userState);
        }
        
        private void OnInsertExp_RecOperationCompleted(object arg) {
            if ((this.InsertExp_RecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertExp_RecCompleted(this, new InsertExp_RecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/ChkExp_No", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChkExp_No(string exp_no) {
            object[] results = this.Invoke("ChkExp_No", new object[] {
                        exp_no});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChkExp_NoAsync(string exp_no) {
            this.ChkExp_NoAsync(exp_no, null);
        }
        
        /// <remarks/>
        public void ChkExp_NoAsync(string exp_no, object userState) {
            if ((this.ChkExp_NoOperationCompleted == null)) {
                this.ChkExp_NoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkExp_NoOperationCompleted);
            }
            this.InvokeAsync("ChkExp_No", new object[] {
                        exp_no}, this.ChkExp_NoOperationCompleted, userState);
        }
        
        private void OnChkExp_NoOperationCompleted(object arg) {
            if ((this.ChkExp_NoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkExp_NoCompleted(this, new ChkExp_NoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/UpdateExp_Rec", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateExp_Rec(string exp_id, string rec_name, string rec_company, string rec_countryid, string rec_city, string rec_addr1, string rec_addr2, string rec_tel, string rec_postcode, string rec_email, string rec_skype) {
            object[] results = this.Invoke("UpdateExp_Rec", new object[] {
                        exp_id,
                        rec_name,
                        rec_company,
                        rec_countryid,
                        rec_city,
                        rec_addr1,
                        rec_addr2,
                        rec_tel,
                        rec_postcode,
                        rec_email,
                        rec_skype});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExp_RecAsync(string exp_id, string rec_name, string rec_company, string rec_countryid, string rec_city, string rec_addr1, string rec_addr2, string rec_tel, string rec_postcode, string rec_email, string rec_skype) {
            this.UpdateExp_RecAsync(exp_id, rec_name, rec_company, rec_countryid, rec_city, rec_addr1, rec_addr2, rec_tel, rec_postcode, rec_email, rec_skype, null);
        }
        
        /// <remarks/>
        public void UpdateExp_RecAsync(string exp_id, string rec_name, string rec_company, string rec_countryid, string rec_city, string rec_addr1, string rec_addr2, string rec_tel, string rec_postcode, string rec_email, string rec_skype, object userState) {
            if ((this.UpdateExp_RecOperationCompleted == null)) {
                this.UpdateExp_RecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExp_RecOperationCompleted);
            }
            this.InvokeAsync("UpdateExp_Rec", new object[] {
                        exp_id,
                        rec_name,
                        rec_company,
                        rec_countryid,
                        rec_city,
                        rec_addr1,
                        rec_addr2,
                        rec_tel,
                        rec_postcode,
                        rec_email,
                        rec_skype}, this.UpdateExp_RecOperationCompleted, userState);
        }
        
        private void OnUpdateExp_RecOperationCompleted(object arg) {
            if ((this.UpdateExp_RecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExp_RecCompleted(this, new UpdateExp_RecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GetExpress", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetExpress(string ExpNo, string No, string exp_id, string cust_id, string saleid, string startDate, string endDate, string exp_pre, string product, bool bLC) {
            object[] results = this.Invoke("GetExpress", new object[] {
                        ExpNo,
                        No,
                        exp_id,
                        cust_id,
                        saleid,
                        startDate,
                        endDate,
                        exp_pre,
                        product,
                        bLC});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetExpressAsync(string ExpNo, string No, string exp_id, string cust_id, string saleid, string startDate, string endDate, string exp_pre, string product, bool bLC) {
            this.GetExpressAsync(ExpNo, No, exp_id, cust_id, saleid, startDate, endDate, exp_pre, product, bLC, null);
        }
        
        /// <remarks/>
        public void GetExpressAsync(string ExpNo, string No, string exp_id, string cust_id, string saleid, string startDate, string endDate, string exp_pre, string product, bool bLC, object userState) {
            if ((this.GetExpressOperationCompleted == null)) {
                this.GetExpressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpressOperationCompleted);
            }
            this.InvokeAsync("GetExpress", new object[] {
                        ExpNo,
                        No,
                        exp_id,
                        cust_id,
                        saleid,
                        startDate,
                        endDate,
                        exp_pre,
                        product,
                        bLC}, this.GetExpressOperationCompleted, userState);
        }
        
        private void OnGetExpressOperationCompleted(object arg) {
            if ((this.GetExpressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpressCompleted(this, new GetExpressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GetExpress1", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetExpress1(string ExpNo) {
            object[] results = this.Invoke("GetExpress1", new object[] {
                        ExpNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetExpress1Async(string ExpNo) {
            this.GetExpress1Async(ExpNo, null);
        }
        
        /// <remarks/>
        public void GetExpress1Async(string ExpNo, object userState) {
            if ((this.GetExpress1OperationCompleted == null)) {
                this.GetExpress1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpress1OperationCompleted);
            }
            this.InvokeAsync("GetExpress1", new object[] {
                        ExpNo}, this.GetExpress1OperationCompleted, userState);
        }
        
        private void OnGetExpress1OperationCompleted(object arg) {
            if ((this.GetExpress1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpress1Completed(this, new GetExpress1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GetLiRun", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLiRun(string ExpNo, string cust_id, string saleid, string startDate, string endDate, string isPaid, string boxno) {
            object[] results = this.Invoke("GetLiRun", new object[] {
                        ExpNo,
                        cust_id,
                        saleid,
                        startDate,
                        endDate,
                        isPaid,
                        boxno});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLiRunAsync(string ExpNo, string cust_id, string saleid, string startDate, string endDate, string isPaid, string boxno) {
            this.GetLiRunAsync(ExpNo, cust_id, saleid, startDate, endDate, isPaid, boxno, null);
        }
        
        /// <remarks/>
        public void GetLiRunAsync(string ExpNo, string cust_id, string saleid, string startDate, string endDate, string isPaid, string boxno, object userState) {
            if ((this.GetLiRunOperationCompleted == null)) {
                this.GetLiRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLiRunOperationCompleted);
            }
            this.InvokeAsync("GetLiRun", new object[] {
                        ExpNo,
                        cust_id,
                        saleid,
                        startDate,
                        endDate,
                        isPaid,
                        boxno}, this.GetLiRunOperationCompleted, userState);
        }
        
        private void OnGetLiRunOperationCompleted(object arg) {
            if ((this.GetLiRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLiRunCompleted(this, new GetLiRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GetFenHuo", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetFenHuo(string ExpNo, string cust_id, string saleid, string startDate, string endDate, string rec_city, string fenhuoId, string deliveryid, string iSend) {
            object[] results = this.Invoke("GetFenHuo", new object[] {
                        ExpNo,
                        cust_id,
                        saleid,
                        startDate,
                        endDate,
                        rec_city,
                        fenhuoId,
                        deliveryid,
                        iSend});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetFenHuoAsync(string ExpNo, string cust_id, string saleid, string startDate, string endDate, string rec_city, string fenhuoId, string deliveryid, string iSend) {
            this.GetFenHuoAsync(ExpNo, cust_id, saleid, startDate, endDate, rec_city, fenhuoId, deliveryid, iSend, null);
        }
        
        /// <remarks/>
        public void GetFenHuoAsync(string ExpNo, string cust_id, string saleid, string startDate, string endDate, string rec_city, string fenhuoId, string deliveryid, string iSend, object userState) {
            if ((this.GetFenHuoOperationCompleted == null)) {
                this.GetFenHuoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFenHuoOperationCompleted);
            }
            this.InvokeAsync("GetFenHuo", new object[] {
                        ExpNo,
                        cust_id,
                        saleid,
                        startDate,
                        endDate,
                        rec_city,
                        fenhuoId,
                        deliveryid,
                        iSend}, this.GetFenHuoOperationCompleted, userState);
        }
        
        private void OnGetFenHuoOperationCompleted(object arg) {
            if ((this.GetFenHuoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFenHuoCompleted(this, new GetFenHuoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/DelExpress", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelExpress(string exid) {
            object[] results = this.Invoke("DelExpress", new object[] {
                        exid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelExpressAsync(string exid) {
            this.DelExpressAsync(exid, null);
        }
        
        /// <remarks/>
        public void DelExpressAsync(string exid, object userState) {
            if ((this.DelExpressOperationCompleted == null)) {
                this.DelExpressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelExpressOperationCompleted);
            }
            this.InvokeAsync("DelExpress", new object[] {
                        exid}, this.DelExpressOperationCompleted, userState);
        }
        
        private void OnDelExpressOperationCompleted(object arg) {
            if ((this.DelExpressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelExpressCompleted(this, new DelExpressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/upfilebyte", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string upfilebyte([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] b, ref string FileName) {
            object[] results = this.Invoke("upfilebyte", new object[] {
                        b,
                        FileName});
            FileName = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void upfilebyteAsync(byte[] b, string FileName) {
            this.upfilebyteAsync(b, FileName, null);
        }
        
        /// <remarks/>
        public void upfilebyteAsync(byte[] b, string FileName, object userState) {
            if ((this.upfilebyteOperationCompleted == null)) {
                this.upfilebyteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupfilebyteOperationCompleted);
            }
            this.InvokeAsync("upfilebyte", new object[] {
                        b,
                        FileName}, this.upfilebyteOperationCompleted, userState);
        }
        
        private void OnupfilebyteOperationCompleted(object arg) {
            if ((this.upfilebyteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.upfilebyteCompleted(this, new upfilebyteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/downfilebyte", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] downfilebyte(ref string FileName) {
            object[] results = this.Invoke("downfilebyte", new object[] {
                        FileName});
            FileName = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void downfilebyteAsync(string FileName) {
            this.downfilebyteAsync(FileName, null);
        }
        
        /// <remarks/>
        public void downfilebyteAsync(string FileName, object userState) {
            if ((this.downfilebyteOperationCompleted == null)) {
                this.downfilebyteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownfilebyteOperationCompleted);
            }
            this.InvokeAsync("downfilebyte", new object[] {
                        FileName}, this.downfilebyteOperationCompleted, userState);
        }
        
        private void OndownfilebyteOperationCompleted(object arg) {
            if ((this.downfilebyteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downfilebyteCompleted(this, new downfilebyteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GetExpressRec", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetExpressRec(string RecName) {
            object[] results = this.Invoke("GetExpressRec", new object[] {
                        RecName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetExpressRecAsync(string RecName) {
            this.GetExpressRecAsync(RecName, null);
        }
        
        /// <remarks/>
        public void GetExpressRecAsync(string RecName, object userState) {
            if ((this.GetExpressRecOperationCompleted == null)) {
                this.GetExpressRecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpressRecOperationCompleted);
            }
            this.InvokeAsync("GetExpressRec", new object[] {
                        RecName}, this.GetExpressRecOperationCompleted, userState);
        }
        
        private void OnGetExpressRecOperationCompleted(object arg) {
            if ((this.GetExpressRecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpressRecCompleted(this, new GetExpressRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GetUnBox", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUnBox(string Marks) {
            object[] results = this.Invoke("GetUnBox", new object[] {
                        Marks});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnBoxAsync(string Marks) {
            this.GetUnBoxAsync(Marks, null);
        }
        
        /// <remarks/>
        public void GetUnBoxAsync(string Marks, object userState) {
            if ((this.GetUnBoxOperationCompleted == null)) {
                this.GetUnBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnBoxOperationCompleted);
            }
            this.InvokeAsync("GetUnBox", new object[] {
                        Marks}, this.GetUnBoxOperationCompleted, userState);
        }
        
        private void OnGetUnBoxOperationCompleted(object arg) {
            if ((this.GetUnBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnBoxCompleted(this, new GetUnBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/InsertBox", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertBox(
                    string BoxNo, 
                    string BoxOut, 
                    string Size, 
                    string dtBox, 
                    string dtQG, 
                    string dtDG, 
                    string dtPS, 
                    string Ddka, 
                    string Bg, 
                    string gkdz, 
                    string efgk, 
                    string Yjqg, 
                    string Msk, 
                    string Xbly, 
                    string Yk, 
                    string YEKCK, 
                    string ka, 
                    string tel, 
                    string efdz, 
                    string productid) {
            object[] results = this.Invoke("InsertBox", new object[] {
                        BoxNo,
                        BoxOut,
                        Size,
                        dtBox,
                        dtQG,
                        dtDG,
                        dtPS,
                        Ddka,
                        Bg,
                        gkdz,
                        efgk,
                        Yjqg,
                        Msk,
                        Xbly,
                        Yk,
                        YEKCK,
                        ka,
                        tel,
                        efdz,
                        productid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertBoxAsync(
                    string BoxNo, 
                    string BoxOut, 
                    string Size, 
                    string dtBox, 
                    string dtQG, 
                    string dtDG, 
                    string dtPS, 
                    string Ddka, 
                    string Bg, 
                    string gkdz, 
                    string efgk, 
                    string Yjqg, 
                    string Msk, 
                    string Xbly, 
                    string Yk, 
                    string YEKCK, 
                    string ka, 
                    string tel, 
                    string efdz, 
                    string productid) {
            this.InsertBoxAsync(BoxNo, BoxOut, Size, dtBox, dtQG, dtDG, dtPS, Ddka, Bg, gkdz, efgk, Yjqg, Msk, Xbly, Yk, YEKCK, ka, tel, efdz, productid, null);
        }
        
        /// <remarks/>
        public void InsertBoxAsync(
                    string BoxNo, 
                    string BoxOut, 
                    string Size, 
                    string dtBox, 
                    string dtQG, 
                    string dtDG, 
                    string dtPS, 
                    string Ddka, 
                    string Bg, 
                    string gkdz, 
                    string efgk, 
                    string Yjqg, 
                    string Msk, 
                    string Xbly, 
                    string Yk, 
                    string YEKCK, 
                    string ka, 
                    string tel, 
                    string efdz, 
                    string productid, 
                    object userState) {
            if ((this.InsertBoxOperationCompleted == null)) {
                this.InsertBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBoxOperationCompleted);
            }
            this.InvokeAsync("InsertBox", new object[] {
                        BoxNo,
                        BoxOut,
                        Size,
                        dtBox,
                        dtQG,
                        dtDG,
                        dtPS,
                        Ddka,
                        Bg,
                        gkdz,
                        efgk,
                        Yjqg,
                        Msk,
                        Xbly,
                        Yk,
                        YEKCK,
                        ka,
                        tel,
                        efdz,
                        productid}, this.InsertBoxOperationCompleted, userState);
        }
        
        private void OnInsertBoxOperationCompleted(object arg) {
            if ((this.InsertBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBoxCompleted(this, new InsertBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/UpdateBox", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateBox(
                    string id, 
                    string BoxOut, 
                    string Size, 
                    string dtBox, 
                    string dtQG, 
                    string dtDG, 
                    string dtPS, 
                    string Ddka, 
                    string Bg, 
                    string gkdz, 
                    string efgk, 
                    string Yjqg, 
                    string Msk, 
                    string Xbly, 
                    string Yk, 
                    string YEKCK, 
                    string ka, 
                    string tel, 
                    string efdz, 
                    string productid) {
            object[] results = this.Invoke("UpdateBox", new object[] {
                        id,
                        BoxOut,
                        Size,
                        dtBox,
                        dtQG,
                        dtDG,
                        dtPS,
                        Ddka,
                        Bg,
                        gkdz,
                        efgk,
                        Yjqg,
                        Msk,
                        Xbly,
                        Yk,
                        YEKCK,
                        ka,
                        tel,
                        efdz,
                        productid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBoxAsync(
                    string id, 
                    string BoxOut, 
                    string Size, 
                    string dtBox, 
                    string dtQG, 
                    string dtDG, 
                    string dtPS, 
                    string Ddka, 
                    string Bg, 
                    string gkdz, 
                    string efgk, 
                    string Yjqg, 
                    string Msk, 
                    string Xbly, 
                    string Yk, 
                    string YEKCK, 
                    string ka, 
                    string tel, 
                    string efdz, 
                    string productid) {
            this.UpdateBoxAsync(id, BoxOut, Size, dtBox, dtQG, dtDG, dtPS, Ddka, Bg, gkdz, efgk, Yjqg, Msk, Xbly, Yk, YEKCK, ka, tel, efdz, productid, null);
        }
        
        /// <remarks/>
        public void UpdateBoxAsync(
                    string id, 
                    string BoxOut, 
                    string Size, 
                    string dtBox, 
                    string dtQG, 
                    string dtDG, 
                    string dtPS, 
                    string Ddka, 
                    string Bg, 
                    string gkdz, 
                    string efgk, 
                    string Yjqg, 
                    string Msk, 
                    string Xbly, 
                    string Yk, 
                    string YEKCK, 
                    string ka, 
                    string tel, 
                    string efdz, 
                    string productid, 
                    object userState) {
            if ((this.UpdateBoxOperationCompleted == null)) {
                this.UpdateBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBoxOperationCompleted);
            }
            this.InvokeAsync("UpdateBox", new object[] {
                        id,
                        BoxOut,
                        Size,
                        dtBox,
                        dtQG,
                        dtDG,
                        dtPS,
                        Ddka,
                        Bg,
                        gkdz,
                        efgk,
                        Yjqg,
                        Msk,
                        Xbly,
                        Yk,
                        YEKCK,
                        ka,
                        tel,
                        efdz,
                        productid}, this.UpdateBoxOperationCompleted, userState);
        }
        
        private void OnUpdateBoxOperationCompleted(object arg) {
            if ((this.UpdateBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBoxCompleted(this, new UpdateBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/delBox", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool delBox(string id) {
            object[] results = this.Invoke("delBox", new object[] {
                        id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void delBoxAsync(string id) {
            this.delBoxAsync(id, null);
        }
        
        /// <remarks/>
        public void delBoxAsync(string id, object userState) {
            if ((this.delBoxOperationCompleted == null)) {
                this.delBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelBoxOperationCompleted);
            }
            this.InvokeAsync("delBox", new object[] {
                        id}, this.delBoxOperationCompleted, userState);
        }
        
        private void OndelBoxOperationCompleted(object arg) {
            if ((this.delBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delBoxCompleted(this, new delBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/BoxIn", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BoxIn(string ids, string boxno) {
            object[] results = this.Invoke("BoxIn", new object[] {
                        ids,
                        boxno});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BoxInAsync(string ids, string boxno) {
            this.BoxInAsync(ids, boxno, null);
        }
        
        /// <remarks/>
        public void BoxInAsync(string ids, string boxno, object userState) {
            if ((this.BoxInOperationCompleted == null)) {
                this.BoxInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoxInOperationCompleted);
            }
            this.InvokeAsync("BoxIn", new object[] {
                        ids,
                        boxno}, this.BoxInOperationCompleted, userState);
        }
        
        private void OnBoxInOperationCompleted(object arg) {
            if ((this.BoxInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoxInCompleted(this, new BoxInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/UnBox", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnBox(string ids, string boxno) {
            object[] results = this.Invoke("UnBox", new object[] {
                        ids,
                        boxno});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnBoxAsync(string ids, string boxno) {
            this.UnBoxAsync(ids, boxno, null);
        }
        
        /// <remarks/>
        public void UnBoxAsync(string ids, string boxno, object userState) {
            if ((this.UnBoxOperationCompleted == null)) {
                this.UnBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnBoxOperationCompleted);
            }
            this.InvokeAsync("UnBox", new object[] {
                        ids,
                        boxno}, this.UnBoxOperationCompleted, userState);
        }
        
        private void OnUnBoxOperationCompleted(object arg) {
            if ((this.UnBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnBoxCompleted(this, new UnBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecurityHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("express/GexExpBox", RequestNamespace="express", ResponseNamespace="express", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GexExpBox(string boxno) {
            object[] results = this.Invoke("GexExpBox", new object[] {
                        boxno});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GexExpBoxAsync(string boxno) {
            this.GexExpBoxAsync(boxno, null);
        }
        
        /// <remarks/>
        public void GexExpBoxAsync(string boxno, object userState) {
            if ((this.GexExpBoxOperationCompleted == null)) {
                this.GexExpBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGexExpBoxOperationCompleted);
            }
            this.InvokeAsync("GexExpBox", new object[] {
                        boxno}, this.GexExpBoxOperationCompleted, userState);
        }
        
        private void OnGexExpBoxOperationCompleted(object arg) {
            if ((this.GexExpBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GexExpBoxCompleted(this, new GexExpBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="express")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="express", IsNullable=false)]
    public partial class SecurityHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string securityKeyField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string SecurityKey {
            get {
                return this.securityKeyField;
            }
            set {
                this.securityKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertExpressCompletedEventHandler(object sender, InsertExpressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertExpressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertExpressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ShCompletedEventHandler(object sender, ShCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateExpressCompletedEventHandler(object sender, UpdateExpressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExpressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExpressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertExp_RecCompletedEventHandler(object sender, InsertExp_RecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertExp_RecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertExp_RecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChkExp_NoCompletedEventHandler(object sender, ChkExp_NoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkExp_NoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkExp_NoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateExp_RecCompletedEventHandler(object sender, UpdateExp_RecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExp_RecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExp_RecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetExpressCompletedEventHandler(object sender, GetExpressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExpressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetExpress1CompletedEventHandler(object sender, GetExpress1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpress1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExpress1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLiRunCompletedEventHandler(object sender, GetLiRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLiRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLiRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFenHuoCompletedEventHandler(object sender, GetFenHuoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFenHuoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFenHuoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelExpressCompletedEventHandler(object sender, DelExpressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelExpressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelExpressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void upfilebyteCompletedEventHandler(object sender, upfilebyteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class upfilebyteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal upfilebyteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void downfilebyteCompletedEventHandler(object sender, downfilebyteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downfilebyteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downfilebyteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetExpressRecCompletedEventHandler(object sender, GetExpressRecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpressRecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExpressRecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUnBoxCompletedEventHandler(object sender, GetUnBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertBoxCompletedEventHandler(object sender, InsertBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateBoxCompletedEventHandler(object sender, UpdateBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void delBoxCompletedEventHandler(object sender, delBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void BoxInCompletedEventHandler(object sender, BoxInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoxInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoxInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UnBoxCompletedEventHandler(object sender, UnBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GexExpBoxCompletedEventHandler(object sender, GexExpBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GexExpBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GexExpBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591